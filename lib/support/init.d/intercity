#! /bin/sh

# INTERCITY
# Maintainer: @jvanbaarsen
# Authors: jeroen@firmhouse.com

### BEGIN INIT INFO
# Provides:          intercity
# Required-Start:    $local_fs $remote_fs $network $syslog redis-server
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Intercity Server management
# Description:       Intercity Server management
# chkconfig: - 85 14
### END INIT INFO


###
# DO NOT EDIT THIS FILE!
# This file will be overwritten on update.
###

### Environment variables
RAILS_ENV="production"

# Script variable names should be lower-case not to conflict with
# internal /bin/sh variables such as PATH, EDITOR or SHELL.
app_user="intercity"
app_root="/home/$app_user/intercity"
pid_path="$app_root/tmp/pids"
sidekiq_pid_path="$pid_path/sidekiq.pid"
shell_path="/bin/bash"

# Switch to the app_user if it is not he/she who is running the script.
if [ `whoami` != "$app_user" ]; then
  eval su - "$app_user" -s $shell_path -c $(echo \")$0 "$@"$(echo \"); exit;
fi

# Switch to the intercity path, exit on failure.
if ! cd "$app_root" ; then
 echo "Failed to cd into $app_root, exiting!";  exit 1
fi

### Init Script functions

## Gets the pids from the files
check_pids(){
  if ! mkdir -p "$pid_path"; then
    echo "Could not create the path $pid_path needed to store the pids."
    exit 1
  fi
  if [ -f "$sidekiq_pid_path" ]; then
    spid=$(cat "$sidekiq_pid_path")
  else
    spid=0
  fi
}

## Called when we have started the two processes and are waiting for their pid files.
wait_for_pids(){
  # We are sleeping a bit here mostly because sidekiq is slow at writing it's pid
  i=0;
  while [ ! -f $sidekiq_pid_path ]; do
    sleep 0.1;
    i=$((i+1))
    if [ $((i%10)) = 0 ]; then
      echo -n "."
    elif [ $((i)) = 301 ]; then
      echo "Waited 30s for the processes to write their pids, something probably went wrong."
      exit 1;
    fi
  done
  echo
}

check_pids

## Checks whether the different parts of the service are already running or not.
check_status(){
  check_pids
  if [ $spid -ne 0 ]; then
    kill -0 "$spid" 2>/dev/null
    sidekiq_status="$?"
  else
    sidekiq_status="-1"
  fi
  if [ $sidekiq_status = 0 ]; then
    intercity_status=0
  else
    # http://refspecs.linuxbase.org/LSB_4.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html
    # code 3 means 'program is not running'
    intercity_status=3
  fi
}

## Check for stale pids and remove them if necessary.
check_stale_pids(){
  check_status
  # If there is a pid it is something else than 0, the service is running if
  # *_status is == 0.
  if [ "$spid" != "0" ] && [ "$sidekiq_status" != "0" ]; then
    echo "Removing stale Sidekiq job dispatcher pid. This is most likely caused by Sidekiq crashing the last time it ran."
    if ! rm "$sidekiq_pid_path"; then
      echo "Unable to remove stale pid, exiting"
      exit 1
    fi
  fi
}

## If no parts of the service is running, bail out.
exit_if_not_running(){
  check_stale_pids
  if [ "$sidekiq_status" != "0" ]}; then
    echo "Intercity is not running."
    exit
  fi
}

## Starts Sidekiq if it is not running.
start_intercity() {
  check_stale_pids

  if [ "$sidekiq_status" != "0" ]; then
    echo "Starting Intercity Sidekiq"
  fi

  # If sidekiq is already running, don't start it again.
  if [ "$sidekiq_status" = "0" ]; then
    echo "The Sidekiq job dispatcher is already running with pid $spid, not restarting"
  else
    RAILS_ENV=$RAILS_ENV bin/background_jobs start &
  fi

  # Wait for the pids to be planted
  wait_for_pids
  # Finally check the status to tell wether or not Intercity is running
  print_status
}

## Asks Sidekiq if they would be so kind as to stop, if not kills them.
stop_intercity() {
  exit_if_not_running

  if [ "$sidekiq_status" = "0" ]; then
    echo "Shutting down Intercity Sidekiq"
    RAILS_ENV=$RAILS_ENV bin/background_jobs stop
  fi

  # If something needs to be stopped, lets wait for it to stop. Never use SIGKILL in a script.
  while [ "$sidekiq_status" = "0" ]; do
    sleep 1
    check_status
    printf "."
    if [ "$sidekiq_status" != "0" ]; then
      printf "\n"
      break
    fi
  done

  sleep 1
  print_status
}

## Prints the status of Intercity and it's components.
print_status() {
  check_status
  if [ "$sidekiq_status" != "0" ]; then
    echo "Intercity is not running."
    return
  fi
  if [ "$sidekiq_status" = "0" ]; then
      echo "The Intercity Sidekiq job dispatcher with pid $spid is running."
  else
      printf "The Intercity Sidekiq job dispatcher is \033[31mnot running\033[0m.\n"
  fi
  if [ "$sidekiq_status" = "0" ]; then
    printf "Intercity and all its components are \033[32mup and running\033[0m.\n"
  fi
}

## Tells Sidekiq to restart
reload_intercity(){
  exit_if_not_running

  echo "Restarting Intercity Sidekiq since it isn't capable of reloading its config..."
  RAILS_ENV=$RAILS_ENV bin/background_jobs restart

  wait_for_pids
  print_status
}

## Restarts Sidekiq.
restart_intercity(){
  check_status
  if [ "$sidekiq_status" = "0" ]; then
    stop_intercity
  fi
  start_intercity
}


### Finally the input handling.

case "$1" in
  start)
        start_intercity
        ;;
  stop)
        stop_intercity
        ;;
  restart)
        restart_intercity
        ;;
  reload|force-reload)
	reload_intercity
        ;;
  status)
        print_status
        exit $intercity_status
        ;;
  *)
        echo "Usage: service intercity {start|stop|restart|reload|status}"
        exit 1
        ;;
esac

exit
