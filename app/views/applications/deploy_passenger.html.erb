<% title("Deploying #{current_app.name}") %>

<%= render "app_navigation" %>

<section class="guide js-code-highlighting">
  <h1>Deploying <strong><%= current_app.name %></strong></h1>

  <section class="introduction">
    <p>Deploying your application works with Capistrano. Capistrano is the default tool for deploying Ruby on Rails applications.</p>
    <p>The following steps show you how to install Capistrano and deploy your application on your server.</p>
  </section>

  <section class="step">
    <h1>1. Install Capistrano in your Rails project</h1>

    <p>First, add the gem to the <code>Gemfile</code> of your application and install it.</p>

    <p>In your Gemfile:</p>
    <pre><code class="ruby">
      gem 'capistrano', '~> 3.3.5'
      gem 'capistrano-rails', '~> 1.1.2'
    </code></pre>

    <p>Then:</p>

    <pre><code class="bash">
      $ bundle install
    </code></pre>

    <p>Capistrano is now installed by bundler. Continue to step 2.</p>
  </section>

  <section class="step">

    <h1>2. Configure Capistrano</h1>

    <p>Run the following command to generate Capistrano configuration files in your Rails project:</p>

    <pre><code>
      $ bundle exec cap install
    </code></pre>

    <p>This will generate a few files in your application directory:</p>

    <ul>
      <li>Capfile</li>
      <li>config/deploy.rb</li>
      <li>config/deploy/staging.rb</li>
      <li>config/deploy/production.rb</li>
    </ul>

    <p>Replace the contents of <code>Capfile</code> with the following:</p>

    <pre><code class="ruby">
      # Load DSL and Setup Up Stages
      require 'capistrano/setup'

      # Includes default deployment tasks
      require 'capistrano/deploy'

      require 'capistrano/rails'

      # Loads custom tasks from `lib/capistrano/tasks' if you have any defined.
      Dir.glob('lib/capistrano/tasks/*.cap').each { |r| import r }
    </code></pre>

    <p>Then, copy the following configuration snippet into <code>config/deploy.rb</code>
    and change the <strong>repo_url</strong> setting to your GitHub SSH deployment URL:</p>

    <pre><code class="ruby">
      lock '>= 3.1.0'
      set :application, '<%= current_app.name %>'
      set :repo_url, '>> your git repo_url'

      # Default branch is :master
      # ask :branch, proc { `git rev-parse --abbrev-ref HEAD`.chomp }

      # Default deploy_to directory is /var/www/my_app
      set :deploy_to, '/u/apps/<%= current_app.name %>'

      # Use agent forwarding for SSH so you can deploy with the SSH key on your workstation.
      set :ssh_options, {
        forward_agent: true
      }

      # Default value for :pty is false
      set :pty, true

      # Default value for :linked_files is []
      set :linked_files, %w{config/database.yml .rbenv-vars .ruby-version}

      # Default value for linked_dirs is []
      set :linked_dirs, %w{log tmp/pids tmp/cache tmp/sockets vendor/bundle public/system}

      # Default value for default_env is {}
      set :default_env, { path: "/opt/rbenv/shims:$PATH" }

      # Default value for keep_releases is 5
      # set :keep_releases, 5

      namespace :deploy do
        desc 'Restart application'
        task :restart do
          on roles(:app), in: :sequence, wait: 5 do
            execute :touch, release_path.join('tmp/restart.txt')
          end
        end

        after :publishing, :restart
      end
    </code></pre>

    <p>Replace the contents of the file <code>config/deploy/<%= current_app.rails_environment%>.rb</code> with the single line:</p>

    <pre><code class="ruby">
      server '<%= current_app.server.address %>', user: 'deploy', roles: %w{web app db}
    </code></pre>

    <p>Continue to step 3.</p>

  </section>

  <section class="step">
    <h1>3. Deploy your application</h1>

    <p>Congratulations! Everything is set up to deploy your app. Run this command to deploy your application.</p>

    <pre><code>
      $ bundle exec cap <%= current_app.rails_environment%> deploy
    </code></pre>
  </section>

</section>
