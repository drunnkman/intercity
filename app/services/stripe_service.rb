#
# Simple proxy class for Stripe API
#
class StripeService
  #
  # Creates Stripe customer
  #
  #  stripe_card_token: a token generated by Stripe.js call
  #
  def create_customer(description)
    Stripe::Customer.create description: description
  end

  #
  # Find customer by stripe id
  #
  def find_customer(id)
    Stripe::Customer.retrieve id: id
  end

  #
  # Find plan by stripe id
  #
  def find_plan(id)
    Stripe::Plan.retrieve id: id
  end

  #
  # Changes plan of the given subscription WITHOUT propating
  #
  def change_plan(stripe_customer, subscription_id, plan_id)
    stripe_subscription = stripe_customer.subscriptions.retrieve(subscription_id)
    stripe_subscription.plan = plan_id
    stripe_subscription.prorate = false
    stripe_subscription.save
  end

  #
  # Find invoice by stripe id
  #
  def find_invoice(id)
    Stripe::Invoice.retrieve id: id
  end

  #
  # Create invoice item. Mainy used for tax invoices
  #
  def create_invoice_item(customer_id, amount, currency, description,
                          parent_invoice_id = nil)
    Stripe::InvoiceItem.create(customer: customer_id, amount: amount,
                               currency: currency, description: description,
                               invoice: parent_invoice_id)
  end

  #
  # Create subscription for the given stripe user to the given plan id
  #
  def create_subscription(stripe_customer, plan_id, card)
    stripe_customer.subscriptions.create plan: plan_id, card: card
  end

  #
  # Delete subscription. It's not actually deleted but "canceled"
  #
  def cancel_subscription(stripe_customer, subscription_id)
    find_subscription(stripe_customer, subscription_id).delete
  end

  #
  # Find subscription
  #
  def find_subscription(stripe_customer, subscription_id)
    stripe_customer.subscriptions.retrieve subscription_id
  end
end
